import numpy as np
from keras.models import Sequential
from keras.layers import LSTM
from keras.layers import Dense
from keras.layers import Dropout
import pandas as pd
from matplotlib import pyplot as plt
from sklearn.preprocessing import StandardScaler
import seaborn as sns

df = pd.read_csv('StockData/MSFT.csv')
dates = pd.to_datetime(df['Date'])

cols = list(df)[1:6]

df_for_training = df[cols].astype(float)

scaler = StandardScaler()
scaler = scaler.fit(df_for_training)
df_for_training_scaled = scaler.transform(df_for_training)

X = []
y = []

n_future = 1
n_past = 14

for i in range(n_past, len(df_for_training_scaled) - n_future + 1):
    X.append(df_for_training_scaled[i - n_past:i, 0:df_for_training.shape[1]])
    y.append(df_for_training_scaled[i + n_future - 1:i + n_future, 0])

X, y = np.array(X), np.array(y)

q_80 = int(len(dates) * 0.8)
q_90 = int(len(dates) * 0.9)

train_dates, train_X, train_y = dates[:q_80], X[:q_80], y[:q_80]
val_dates, val_X, val_y = dates[q_80:q_90], X[q_80:q_90], y[q_80:q_90]
dates_test, X_test, y_test = dates[q_90:], X[q_90:], y[q_90:]

print('trainX shape == {}.'.format(train_X.shape))
print('trainY shape == {}.'.format(train_y.shape))

model = Sequential()
model.add(LSTM(64, activation='relu', input_shape=(train_X.shape[1], train_X.shape[2]), return_sequences=True))
model.add(LSTM(32, activation='relu', return_sequences=False))
model.add(Dropout(0.2))
model.add(Dense(train_y.shape[1]))

model.compile(optimizer='adam', loss='mse')
print(model.summary())

history = model.fit(train_X, train_y, epochs=10, batch_size=16, validation_data=(val_X, val_y), verbose=1)

plt.plot(history.history['loss'], label='Training loss')
plt.plot(history.history['val_loss'], label='Validation loss')
plt.legend()
plt.show()

n_future=len(val_X)
forecast_period_dates = pd.date_range(list(train_dates)[-1], periods=n_future, freq='1d').tolist()

forecast = model.predict(val_X)

forecast_copies = np.repeat(forecast, df_for_training.shape[1], axis=-1)
y_pred_future = scaler.inverse_transform(forecast_copies)[:,0]

forecast_dates = []
for time_i in forecast_period_dates:
    forecast_dates.append(time_i.date())

df_forecast = pd.DataFrame({'Date':np.array(forecast_dates), 'Open':y_pred_future})
df_forecast['Date'] = pd.to_datetime(df_forecast['Date'])

original = df[['Date', 'Open']]
original['Date'] = pd.to_datetime(original['Date'])
original = original.loc[original['Date'] >= '2024-01-05']

# sns.lineplot(x=original['Date'], y=original['Open'])
# sns.lineplot(x=df_forecast['Date'], y=df_forecast['Open'])

plt.plot(val_dates, val_y)
plt.plot(df_forecast['Date'], df_forecast['Open'])
plt.legend()
plt.show()